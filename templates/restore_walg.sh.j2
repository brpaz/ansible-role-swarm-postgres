#!/bin/bash
# WAL-G Restore Script
# Managed by Ansible - manual changes will be overwritten

set -euo pipefail

log() {
    local level=${2:-INFO}
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] ${level}: $1"
}

trap 'catch' ERR

catch() {
    local exit_code=$?
    log "An error occurred during the restore process. Exit code: $exit_code" "ERROR"

    if [[ -f /tmp/walg-env-docker ]]; then
        log "Cleaning up temporary environment file" "ERROR"
        rm -f /tmp/walg-env-docker
    fi

    if [[ -n "${RESTORE_IN_PROGRESS:-}" ]]; then
        log "WARNING: Restore was interrupted. Database may be in an inconsistent state." "ERROR"
    fi

    exit $exit_code
}

verify_backup() {
    local backup_name=$1

    log "Verifying backup integrity..."
    if ! docker run --rm \
        --env-file /tmp/walg-env-docker \
        {{ postgres_image }}:{{ postgres_version }} \
        wal-g backup-list 2>&1 | grep -q "^$backup_name"; then
        log "Backup '$backup_name' not found" "ERROR"
        exit 1
    fi
}

get_backup_size() {
    local backup_name=$1

    log "Retrieving backup size..."
    docker run --rm \
        --env-file /tmp/walg-env-docker \
        {{ postgres_image }}:{{ postgres_version }} \
        wal-g backup-list --detail 2>/dev/null | grep "^$backup_name" | awk '{print $2}'
}

validate_time_format() {
    local time_str=$1
    if ! date -d "$time_str" >/dev/null 2>&1; then
        log "Invalid time format. Please use 'YYYY-MM-DD HH:MM:SS' format" "ERROR"
        exit 1
    fi
}

show_help() {
    cat <<EOF
Usage: $0 [options]
WAL-G restore script for PostgreSQL

Options:
  -b, --backup-name NAME    Restore specific backup (e.g. base_000000010000000000000007)
  -l, --latest              Restore latest backup (default)
  -t, --target-time TIME    Restore to specific point in time (e.g. '2023-06-15 14:30:00')
  -d, --dry-run             Print actions without executing
  -h, --help                Show this help message

Examples:
  $0 -l
  $0 -b base_000000010000000000000007
  $0 -t '2023-06-15 14:30:00'
  $0 -d -b base_000000010000000000000007
EOF
}

RESTORE_LATEST=true
BACKUP_NAME=""
TARGET_TIME=""
DRY_RUN=false
SKIP_CONFIRM=false
PG_DATA_DIR="/var/lib/postgresql/data"
PG_CONF_FILE="/etc/postgresql/postgresql.conf"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -b|--backup-name) BACKUP_NAME="$2"; RESTORE_LATEST=false; shift 2 ;;
        -l|--latest) RESTORE_LATEST=true; shift ;;
        -t|--target-time) TARGET_TIME="$2"; RESTORE_LATEST=false; shift 2 ;;
        -d|--dry-run) DRY_RUN=true; shift ;;
        -y|--yes) SKIP_CONFIRM=true; shift ;;
        -h|--help) show_help; exit 0 ;;
        *) echo "Unknown option: $1"; show_help; exit 1 ;;
    esac
done

if [[ -n "$TARGET_TIME" ]]; then
    validate_time_format "$TARGET_TIME"
fi

source /etc/postgresql/walg/walg-env

# Format the environment variables for Docker
sed -E 's/^export //; s/^([^=]+)="(.*)"$/\1=\2/' /etc/postgresql/walg/walg-env > /tmp/walg-env-docker

log "Available backups:"
docker run --rm \
    --env-file /tmp/walg-env-docker \
    {{ postgres_image }}:{{ postgres_version }} \
    wal-g backup-list --detail

# Determine which backup to use
if $RESTORE_LATEST; then
    BACKUP_NAME=$(docker run --rm \
        --env-file /tmp/walg-env-docker \
        {{ postgres_image }}:{{ postgres_version }} \
        wal-g backup-list | tail -n1)
    log "Latest backup is: $BACKUP_NAME"
fi

if [[ -n "$BACKUP_NAME" ]]; then
    verify_backup "$BACKUP_NAME"
    BACKUP_SIZE=$(get_backup_size "$BACKUP_NAME")
    log "Backup size: $BACKUP_SIZE"
fi

if ! $DRY_RUN; then
    if ! $SKIP_CONFIRM; then
        read -p "$(log "This will DESTROY all data in the current database. Are you sure? [y/N] ")" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log "Operation cancelled"
            exit 1
        fi
    fi
fi

if $DRY_RUN; then
    log "DRY RUN: Actions to be performed:"
    log "- Stop PostgreSQL service"
    log "- Clean data directory"
    if $RESTORE_LATEST; then
        log "- Restore latest backup ($BACKUP_NAME)"
    elif [[ -n "$BACKUP_NAME" ]]; then
        log "- Restore backup '$BACKUP_NAME'"
    elif [[ -n "$TARGET_TIME" ]]; then
        log "- Restore to point-in-time: $TARGET_TIME"
        log "- Configure recovery settings"
    fi
    log "- Create recovery.signal"
    log "- Start PostgreSQL service"
    exit 0
fi

log "Stopping PostgreSQL service"
docker service scale {{ postgres_service_name }}=0

# Verify service is stopped
while [[ $(docker service ls -f "name={{ postgres_service_name }}" --format "{% raw %}{{.Replicas}}{% endraw %}") != "0/0" ]]; do
  log "Waiting for service to stop completely..."
  sleep 2
done

log "Cleaning data directory"

# Get docker volume path
PGDATA_VOLUME_PATH=$(docker volume inspect postgres_data --format '{% raw %}{{ .Mountpoint }}{% endraw %}')

if [[ -z "$PGDATA_VOLUME_PATH" ]]; then
    log "Unable to find PostgreSQL data volume" "ERROR"
    exit 1
fi

rm -rf "${PGDATA_VOLUME_PATH:?}"/*

log "Starting restore process"
RESTORE_IN_PROGRESS=1

# Build restore command with proper argument format
if $RESTORE_LATEST; then
    BACKUP_ARG="LATEST"
elif [[ -n "$BACKUP_NAME" ]]; then
    BACKUP_ARG="$BACKUP_NAME"
else
    BACKUP_ARG="LATEST"
fi

# Start restore
docker run --rm \
    -v postgres_data:${PG_DATA_DIR} \
    -v /etc/postgresql:/etc/postgresql \
    --env-file /tmp/walg-env-docker \
    {{ postgres_image }}:{{ postgres_version }} \
    wal-g backup-fetch "$PG_DATA_DIR" "$BACKUP_ARG"

# Write recovery config
log "Writing restore configuration"
docker run --rm \
    -v postgres_data:${PG_DATA_DIR} \
    -v /etc/postgresql:/etc/postgresql \
    -e PG_CONF_FILE="${PG_CONF_FILE}" \
    -e TARGET_TIME="${TARGET_TIME:-}" \
    {{ postgres_image }}:{{ postgres_version }} \
    sh -c 'echo "" >> ${PG_CONF_FILE} && \
           echo "# Recovery configuration added by restore script" >> ${PG_CONF_FILE} && \
           echo "restore_command = '\''wal-g wal-fetch \"%f\" \"%p\"'\''" >> ${PG_CONF_FILE} && \
           if [ -n "${TARGET_TIME}" ]; then
               echo "recovery_target_time = '\''${TARGET_TIME}'\''" >> ${PG_CONF_FILE}
               echo "recovery_target_action = '\''promote'\''" >> ${PG_CONF_FILE}
           fi'

log "Creating recovery.signal"
docker run --rm \
    -v postgres_data:${PG_DATA_DIR} \
    {{ postgres_image }}:{{ postgres_version }} \
    sh -c "touch ${PG_DATA_DIR}/recovery.signal"

log "Temporarily disabling health checks"
docker service update --no-healthcheck {{ postgres_service_name }}

docker service scale {{ postgres_service_name }}=1

# Wait for PostgreSQL to start
log "Waiting for PostgreSQL to start"

CONTAINER_ID=$(docker ps -q -f name={{ postgres_service_name }})
while true; do
  if docker exec "$CONTAINER_ID" pg_isready -U postgres; then
    break
  fi
  log "PostgreSQL is not ready yet, waiting..."
  sleep 2
done

log "PostgreSQL is up"
log "Restore completed successfully!"

log "Removing recovery files and configuration"
docker run --rm \
    -v postgres_data:${PG_DATA_DIR} \
    -v /etc/postgresql:/etc/postgresql \
    {{ postgres_image }}:{{ postgres_version }} \
    sh -c "rm -f ${PG_DATA_DIR}/recovery.signal && \
           sed -i '/# Recovery configuration added by restore script/,+3d' ${PG_CONF_FILE}"

log "Restoring normal health check timeouts"
docker service update \
    --health-cmd="pg_isready -U postgres" \
    --health-interval=5s \
    --health-timeout=2s \
    --health-retries=5 \
    --health-start-period=10s \
    --force \
    {{ postgres_service_name }}

log "Restore process complete!"



